services:
  # === NEXTCLOUD SERVICES ===
  db:
    image: mariadb:10.11
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_PASSWORD: nextcloud
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud
    networks:
      - nextcloud_network
      - shared_network

  app:
    image: nextcloud
    restart: always
    ports:
      - 777:80
    links:
      - db
    volumes:
      - nextcloud:/var/www/html
      - type: bind
        source: "N:/nextcloud-data"
        target: /var/www/html/data
    environment:
      MYSQL_PASSWORD: nextcloud
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud
      MYSQL_HOST: db
    networks:
      - nextcloud_network
      - shared_network

  # === N8N ECOSYSTEM SERVICES ===
  # PostgreSQL Database for N8N
  postgres:
    image: postgres:15-alpine
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      EVOLUTION_DB: ${EVOLUTION_DB:-evolution}
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      POSTGRES_NON_ROOT_USER: ${POSTGRES_NON_ROOT_USER:-n8n}
      POSTGRES_NON_ROOT_PASSWORD: ${POSTGRES_NON_ROOT_PASSWORD:-n8n_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./n8n-docker-setup/init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    ports:
      - "5432:5432"
    command: >
      postgres 
      -c ssl=off
      -c shared_preload_libraries=''
      -c max_connections=200
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n_network
      - shared_network

  # Redis for Queue Management and Caching
  redis:
    image: redis:7-alpine
    container_name: n8n_redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis_password}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./n8n-docker-setup/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n_network
      - shared_network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: n8n_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-t6t}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-bDpv887pCn@YT}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-n8n_vhost}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./n8n-docker-setup/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./n8n-docker-setup/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - n8n_network
      - shared_network

  # Grafana for Monitoring and Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: n8n_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-t6t}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-bDpv887pCn@YT}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_SECURITY_DISABLE_GRAVATAR: true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./n8n-docker-setup/grafana/provisioning:/etc/grafana/provisioning
      - ./n8n-docker-setup/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - n8n_network
      - shared_network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Main Application
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n_app
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      
      # Redis Configuration
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      EXECUTIONS_MODE: queue
      
      # n8n Configuration
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678}
      
      # Security
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-admin123}
      
      # Timezone
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-America/Sao_Paulo}
      TZ: ${TZ:-America/Sao_Paulo}
      
      # File Storage
      N8N_DEFAULT_BINARY_DATA_MODE: filesystem
      
      # Logging
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      N8N_LOG_OUTPUT: ${N8N_LOG_OUTPUT:-console,file}
      
      # Performance
      NODE_OPTIONS: --max-old-space-size=2048
      
      # Features
      N8N_METRICS: ${N8N_METRICS:-true}
      N8N_DIAGNOSTICS_ENABLED: ${N8N_DIAGNOSTICS_ENABLED:-false}
      
    ports:
      - "${N8N_PORT:-5678}:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-docker-setup/local-files:/files
      - ./n8n-docker-setup/custom-nodes:/home/node/.n8n/custom
      - ./n8n-docker-setup/backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n_network
      - shared_network
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Worker (for queue processing)
  n8n-worker:
    image: n8nio/n8n:latest
    container_name: n8n_worker
    restart: unless-stopped
    command: worker
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      
      # Redis Configuration
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      EXECUTIONS_MODE: queue
      
      # Timezone
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-America/Sao_Paulo}
      TZ: ${TZ:-America/Sao_Paulo}
      
      # Performance
      NODE_OPTIONS: --max-old-space-size=1024
      
      # Logging
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-docker-setup/local-files:/files
      - ./n8n-docker-setup/custom-nodes:/home/node/.n8n/custom
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n_network
      - shared_network

  # === CLOUDFLARE TUNNEL ===
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel run
    volumes:
      - ./.cloudflared:/home/nonroot/.cloudflared
    networks:
      - shared_network
    depends_on:
      - app
      - n8n
      - grafana

volumes:
  # Nextcloud volumes
  db:
  nextcloud:
  # N8N ecosystem volumes
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  grafana_data:
    driver: local
  n8n_data:
    driver: local

networks:
  nextcloud_network:
    driver: bridge
  n8n_network:
    driver: bridge
  shared_network:
    driver: bridge
